[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\NENAD\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\NENAD\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.0 (Amazon.com Inc. Java 11.0.17)
[debug]       Load.loadUnit: plugins took 87.9427ms
[debug]       Load.loadUnit: defsScala took 0.2283ms
[debug] [Loading] Scanning directory C:\Users\NENAD\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\NENAD\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.1402 ms
[debug]           Load.resolveProject(global-plugins) took 46.9774ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\NENAD\.sbt\1.0\plugins, plugins: List(<none>))) took 94.3431ms
[debug] [Loading] Done in C:\Users\NENAD\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 135.3902ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2202ms
[debug]     Load.loadUnit(file:/C:/Users/NENAD/.sbt/1.0/plugins/, ...) took 231.2977ms
[debug]   Load.apply: load took 376.9636ms
[debug]   Load.apply: resolveProjects took 5.2574ms
[debug]   Load.apply: finalTransforms took 51.546ms
[debug]   Load.apply: config.delegates took 6.5323ms
[debug]   Load.apply: Def.make(settings)... took 336.3345ms
[debug]   Load.apply: structureIndex took 82.4916ms
[debug]   Load.apply: mkStreams took 1.3613ms
[info] loading global plugins from C:\Users\NENAD\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3785.2646ms
[debug]           Load.loadUnit: plugins took 46.3172ms
[debug]           Load.loadUnit: defsScala took 0.0041ms
[debug] [Loading] Scanning directory C:\Users\NENAD\IdeaProjects\scala-book\project
[debug]             Load.loadUnit: mkEval took 7.3074ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\NENAD\IdeaProjects\scala-book\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 4.4356 ms
[info] loading settings for project scala-book-build from idea1.sbt ...
[debug]               Load.resolveProject(scala-book-build) took 3.3284ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scala-book-build, base: C:\Users\NENAD\IdeaProjects\scala-book\project, plugins: List(<none>))) took 8.3706ms
[debug] [Loading] Done in C:\Users\NENAD\IdeaProjects\scala-book\project, returning: (scala-book-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 441.3038ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.968ms
[debug]         Load.loadUnit(file:/C:/Users/NENAD/IdeaProjects/scala-book/project/, ...) took 499.1934ms
[debug]       Load.apply: load took 504.7644ms
[debug]       Load.apply: resolveProjects took 0.2546ms
[debug]       Load.apply: finalTransforms took 21.3341ms
[debug]       Load.apply: config.delegates took 0.5229ms
[debug]       Load.apply: Def.make(settings)... took 193.3803ms
[debug]       Load.apply: structureIndex took 89.6506ms
[debug]       Load.apply: mkStreams took 0.0046ms
[info] loading project definition from C:\Users\NENAD\IdeaProjects\scala-book\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3969.2124ms
[debug]     Load.loadUnit: defsScala took 0.0025ms
[debug] [Loading] Scanning directory C:\Users\NENAD\IdeaProjects\scala-book
[debug]       Load.loadUnit: mkEval took 0.2024ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.5944 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 66.7012ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\NENAD\IdeaProjects\scala-book, plugins: List(<none>))) took 71.5833ms
[debug] [Loading] Done in C:\Users\NENAD\IdeaProjects\scala-book, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 5912.8437ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.8126ms
[debug]   Load.loadUnit(file:/C:/Users/NENAD/IdeaProjects/scala-book/, ...) took 9892.5734ms
[debug] Load.apply: load took 9894.4697ms
[debug] Load.apply: resolveProjects took 0.1183ms
[debug] Load.apply: finalTransforms took 33.8831ms
[debug] Load.apply: config.delegates took 0.3307ms
[debug] Load.apply: Def.make(settings)... took 129.3465ms
[debug] Load.apply: structureIndex took 35.0675ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to scala-book (in build file:/C:/Users/NENAD/IdeaProjects/scala-book/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 55451 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 55451, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to scala-book (in build file:/C:/Users/NENAD/IdeaProjects/scala-book/)
[debug] > Exec(idea-shell, None, None)
